"""
from typing import List, Tuple, Union

from ...entity import FIRST_ENTRY, LAST_ENTRY, Empty, Entry
from ...util import round5
from ...util import PTime

p = lambda s: print(50 * "=" + s + 50 * "=")  # ---


def get_overlaps(
    entry: Entry, schedule: List[Entry], include_empty: bool = True
) -> List[Entry]:
    """ """
    _schedule = filter(lambda x: x.duration() > 0, schedule)
    if include_empty:
        return list(filter(entry.overlaps, _schedule))
    return list(
        filter(entry.overlaps, filter(lambda ent: ent.priority >= 0, _schedule))
    )


def slot_is_empty(overlaps: List[Entry]) -> bool:
    """ """
    if len(overlaps) > 1:
        return False
    incumbent = overlaps[0]
    is_empty = isinstance(incumbent, Empty)
    return is_empty


def get_before_and_after_old(
    entry: Entry, schedule: List[Entry]
) -> Tuple[List[Entry], List[Entry], List[Entry]]:
    """ """
    before = list(filter(entry.after, schedule))
    after = list(filter(entry.before, schedule))
    overlaps = list(
        filter(entry.overlaps, filter(lambda ent: ent.priority >= 0, schedule))
    )
    return before, after, overlaps


def get_before_and_after(
    entry: Entry, schedule: List[Entry]
) -> Tuple[List[Entry], List[Entry]]:
    """ """
    _schedule_tmp = filter(lambda x: (x.duration() > 0 and x.hasmass()), schedule)
    _schedule = [x.copy() for x in _schedule_tmp]
    before = list(filter(entry.after_by_start, _schedule))
    after = list(filter(entry.before_by_start, _schedule))
    return before, after


def compress(entries: List[Entry], start: PTime, end: PTime) -> List[Entry]:
    """ """
    entries = list(filter(lambda x: x.priority >= 0, entries))
    # print([x.mintime for x in entries])
    # print([x.maxtime for x in entries])
    # print([x.duration() for x in entries])
    total = start.timeto(end)
    scale = total / sum(map(Entry.duration, entries))
    print(f"{total=}")
    print(f"{scale=}")

    def getnewlength(ent: Entry) -> int:
        """ """
        newlength = round5(scale * ent.duration())
        newlength = min(ent.maxtime, newlength)
        newlength = max(ent.mintime, newlength)
        return newlength

    newentries: List[Entry] = []
    newlengths = [getnewlength(x) for x in entries]
    print(newlengths)
    ratio = total / sum(newlengths)
    print(f"{ratio=}")
    newlengths = [round5(ratio * x) for x in newlengths]
    print(newlengths)
    assert sum(newlengths) == total

    tracker = start.copy()
    for entry, duration in zip(entries, newlengths):
        entry.start = tracker.copy()
        tracker += duration
        entry.end = tracker.copy()
        newentries.append(entry)

    empty_start = newentries[-1].end
    if empty_start < end:
        newentries.append(Empty(start=empty_start, end=end))

    return newentries


def compress_old(entries: List[Entry], start: PTime, end: PTime) -> List[Entry]:
    """ """
    entries = list(filter(lambda x: x.priority >= 0, entries))
    # print([x.mintime for x in entries])
    # print([x.maxtime for x in entries])
    # print([x.duration() for x in entries])
    total = start.timeto(end)
    scale = total / sum(map(Entry.duration, entries))
    print(f"{total=}")
    print(f"{scale=}")

    def getnewlength(ent: Entry) -> int:
        """ """
        newlength = round5(scale * ent.duration())
        newlength = min(ent.maxtime, newlength)
        newlength = max(ent.mintime, newlength)
        return newlength

    newentries: List[Entry] = []
    newlengths = [getnewlength(x) for x in entries]
    print(newlengths)
    ratio = total / sum(newlengths)
    print(f"{ratio=}")
    newlengths = [round5(ratio * x) for x in newlengths]
    print(newlengths)

    entries = [e for e in entries if not e.alignend] + [
        e for e in entries if e.alignend
    ]

    entries_tail: List[Entry] = []
    newentries_tail: List[Entry] = []
    newlengths_tail: List[int] = []
    alignend: bool = entries[-1].alignend
    while alignend:
        entries_tail.insert(0, entries.pop())
        newlengths_tail.insert(0, newlengths.pop())
        alignend = entries[-1].alignend

    tracker = start.copy()
    for entry, duration in zip(entries, newlengths):
        entry.start = tracker.copy()
        tracker += duration
        entry.end = tracker.copy()
        newentries.append(entry)

    if newlengths_tail:
        tracker = end.copy()
        for entry, duration in zip(entries_tail[::-1], newlengths_tail[::-1]):
            entry.end = tracker.copy()
            tracker -= duration
            entry.start = tracker.copy()
            newentries_tail.insert(0, entry)

        if newentries[-1].end != newentries_tail[0].start:
            empty_start = newentries[-1].end
            empty_end = newentries_tail[0].start
            if empty_start < empty_end:
                newentries.append(Empty(start=empty_start, end=empty_end))
    else:
        empty_start = newentries[-1].end
        if empty_start < end:
            newentries.append(Empty(start=empty_start, end=end))

    return newentries + newentries_tail


def compress_weighted(
    entries: List[Entry], start: PTime, end: PTime, weights
) -> List[Entry]:
    """ """
    raise NotImplemented


def entries_fit(entries: List[Entry], start: PTime, stop: PTime) -> bool:
    """
    Indicates whether the total combined minimum duration of a list of entries
      fits within a time range.
    """
    total_min = sum(map(lambda x: x.mintime, filter(Entry.hasmass, entries)))
    # total_min = sum(map(lambda x: x.mintime, entries))
    # print(f"{total_min=}")
    # print(f"{start.timeto(stop)=}")
    return start.timeto(stop) >= total_min


def entries_fit_normal(entries: List[Entry], start: PTime, stop: PTime) -> bool:
    """
    Indicates whether the total combined normal duration of a list of entries
      fits within a time range.
    """
    total_normal = sum(map(lambda x: x.normaltime, filter(Entry.hasmass, entries)))
    # print(f"{total_normal=}")
    # print(f"{start.timeto(stop)=}")
    return start.timeto(stop) >= total_normal


def adjust_forward(entries: List[Entry], start: PTime, stop: PTime) -> List[Entry]:
    """
    'Stacks' a list of entries consecutively, beginning at `start` and ending
      (if possible) before `stop`. If the entries do not fit, an error is raised.
    """
    newentries = []
    tracker = start.copy()
    for entry in entries:
        dur = entry.duration()
        entry.start = tracker.copy()
        tracker += dur
        entry.end = tracker.copy()
        newentries.append(entry)
    return newentries


def adjust_backward(entries: List[Entry], start: PTime, stop: PTime) -> List[Entry]:
    """
    'Stacks' a list of entries consecutively, beginning at `from` and moving
      backward in time, such that entries begin after or at `stop` (if possible).
      If the entries do not fit, and error is raised.
    """
    newentries: List[Entry] = []
    tracker = start.copy()
    for entry in entries[::-1]:
        dur = entry.duration()
        entry.end = tracker.copy()
        tracker -= dur
        entry.start = tracker.copy()
        newentries.insert(0, entry)
    return newentries


def split_before(before: List[Entry]) -> Tuple[List[Entry], List[Entry], PTime]:
    """ """
    movable_before: List[Entry] = []
    ismovable = before[-1].ismovable
    ind = -1
    while ismovable:
        movable_before.insert(0, before[ind])
        ismovable = before[ind - 1].ismovable
        ind -= 1
    before = before[: ind + 1]
    limit_before = PTime() if not before else before[-1].end

    return (before, movable_before, limit_before)


def split_after(after: List[Entry]) -> Tuple[List[Entry], List[Entry], PTime]:
    """ """
    movable_after = []
    ismovable = after[0].ismovable
    ind = 0
    while ismovable:
        movable_after.append(after[ind])
        ismovable = after[ind + 1].ismovable
        ind += 1
    after = after[ind:]
    limit_after = PTime(24) if not after else after[0].start

    return (movable_after, after, limit_after)


def add_over_empty(entry: Entry, empty: Union[Empty, Entry]) -> List[Entry]:
    """ """
    if entry.surrounded(empty):
        return [
            Empty(start=empty.start, end=entry.start),
            entry,
            Empty(start=entry.end, end=empty.end),
        ]
    elif entry.shares_start_shorter(empty):
        return [entry, Empty(start=entry.end, end=empty.end)]
    elif entry.shares_end_shorter(empty):
        return [Empty(start=empty.start, end=entry.start), entry]
    else:
        raise ValueError("Cannot add over empty entry which is shorter!")


def add_movable(entry: Entry, schedule: List[Entry]) -> List[Entry]:
    """ """
    before, after = get_before_and_after(entry, schedule)
    # p("before")
    # print(before)
    # p("after")
    # print(after)

    before, movable_before, limit_before = split_before(before)
    # p("movable_before")
    # print(movable_before)
    # p("limit_before")
    # print(limit_before)

    movable_after, after, limit_after = split_after(after)
    inbetween = movable_before + [entry] + movable_after
    compressed = compress(inbetween, limit_before, limit_after)
    if compressed:
        # print("Entry successfully added.")
        return before + compressed + after
    else:
        print("Entry could not be added!")
        return schedule


def add_immovable(entry: Entry, schedule: List[Entry]) -> List[Entry]:
    """ """
    before, after = get_before_and_after(entry, schedule)

    before, movable_before, limit_before = split_before(before)
    movable_after, after, limit_after = split_after(after)

    fit_before = entries_fit(movable_before, limit_before, entry.start)
    fit_after = entries_fit(movable_after, entry.end, limit_after)
    if not (fit_before and fit_after):
        raise ValueError("Not enough room to add task.")

    movable_before = compress(movable_before, limit_before, entry.start)
    movable_after = compress(movable_after, entry.end, limit_after)

    # NEED TO CONSOLIDATE HERE
    return before + movable_before + [entry] + movable_after + after


# TODO
def add_entry_default_(entry: Entry, schedule: List[Entry]) -> List[Entry]:
    """
    Algorithm in natural language:
    TODO
    """
    print(entry.__dict__)
    # ---------------------------------------------------------------------------

    overlaps = get_overlaps(entry, schedule)
    if slot_is_empty(overlaps):
        print("slot_is_empty")
        ind = schedule.index(overlaps[0])
        del schedule[ind]
        new_entries = add_over_empty(entry, overlaps[0])
        while new_entries:
            schedule.insert(ind, new_entries.pop())
        return schedule

    func = add_movable if entry.ismovable else add_immovable
    ret: List[Entry] = func(entry, schedule)

    return ret


def add_entry_default(
    entry: Entry, schedule: List[Entry]
) -> List[Entry]:  # REWRITE OF OTHER
    """
    Default algorithm for adding an entry to a list of entries.
    """
    overlaps = get_overlaps(entry, schedule)

    p("overlaps")
    print(overlaps)
    p("")
    if slot_is_empty(overlaps):
        p("is empty")
        empty = overlaps[0]
        pos = schedule.index(empty)
        return schedule[:pos] + add_over_empty(entry, empty) + schedule[pos + 1 :]
    func = add_movable if entry.ismovable else add_immovable
    return func(entry, schedule)
"""
